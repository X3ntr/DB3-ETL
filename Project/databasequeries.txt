/*Sorteer alle niet gecomprimeerde tabellen op aantal rijen*/
SELECT DISTINCT s.name, t.name, i.name,  i.type,i.index_id,p.partition_number,p.rows
FROM sys.tables t
LEFT JOIN sys.indexes i ON t.object_id = i.object_id
JOIN sys.schemas s ON t.schema_id = s.schema_id
LEFT JOIN sys.partitions p ON i.index_id = p.index_id AND t.object_id = p.object_id
WHERE t.type = 'U' AND p.data_compression_desc = 'NONE'
ORDER BY p.rows desc

/*Schat hoeveel plaats je bespaart met row compression*/
EXEC sp_estimate_data_compression_savings 
    @schema_name = 'dbo', 
    @object_name = 'treasure_log', 
    @index_id = NULL, 
    @partition_number = NULL, 
    @data_compression = 'ROW'

/*Schat hoeveel plaats je bespaart met page compression*/
EXEC sp_estimate_data_compression_savings 
    @schema_name = 'dbo', 
    @object_name = 'treasure_log', 
    @index_id = NULL, 
    @partition_number = NULL, 
    @data_compression = 'PAGE'

/*Simpele query om compressies te vergelijken*/
SET STATISTICS IO ON;
SET STATISTICS TIME ON;

select * 
from dbo.treasure_log
where log_time >='2018-09-11 03:57:31.7400000';

/*Row compression*/
alter table dbo.treasure_log
rebuild partition = all with(data_compression = row);


/*Page compression*/
alter table dbo.treasure_log
rebuild partition = all with(data_compression = page);

/*FK verwijderen*/
alter table treasure_stages
drop constraint FK14l2mfyurovu79hsams09j1ki,
FKbbboas19x3eunaa89gh76vnk1;

/*Memory optimization*/
USE [master]
GO
ALTER DATABASE [catchem] ADD FILEGROUP [memory_optimized_filegroup_0] CONTAINS MEMORY_OPTIMIZED_DATA 
GO
ALTER DATABASE [catchem] ADD FILE ( NAME = N'memory_optimized_file_572015767', FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL14.SQLSERVER2017\MSSQL\DATA\memory_optimized_file_572015767' ) TO FILEGROUP [memory_optimized_filegroup_0]
GO
USE [catchem]
GO
EXEC dbo.sp_rename @objname = N'[dbo].[treasure_stages]', @newname = N'treasure_stages_old', @objtype = N'OBJECT'
GO
USE [catchem]
GO
SET ANSI_NULLS ON
GO
CREATE TABLE [dbo].[treasure_stages]
(
	[treasure_id] [binary](255) NOT NULL,
	[stages_id] [binary](255) NOT NULL,

 CONSTRAINT [treasure_stages_primaryKey]  PRIMARY KEY NONCLUSTERED 
(
	[treasure_id] ASC,
	[stages_id] ASC
),
 CONSTRAINT [treasure_stages_UQ_2]  UNIQUE NONCLUSTERED HASH 
(
	[stages_id]
)WITH ( BUCKET_COUNT = 524288)
)WITH ( MEMORY_OPTIMIZED = ON , DURABILITY = SCHEMA_AND_DATA )
GO
INSERT INTO [catchem].[dbo].[treasure_stages] ([treasure_id], [stages_id]) SELECT [treasure_id], [stages_id] FROM [catchem].[dbo].[treasure_stages_old] 
GO

/*FK weer toevoegen*/
ALTER TABLE treasure_stages
ADD FOREIGN KEY (treasure_id) REFERENCES treasure(id);
ALTER TABLE treasure_stages
ADD FOREIGN KEY (stages_id) REFERENCES stage(id);

/*Select statement voor details treasure*/
SET STATISTICS IO ON;
SET STATISTICS TIME ON;

select t.id,tl.description,ut.first_name, ut.last_name,s.description
from dbo.treasure t
join dbo.treasure_log tl on tl.treasure_id=t.id
join dbo.user_table ut on t.owner_id=ut.id
join dbo.treasure_stages ts on ts.treasure_id=t.id
join dbo.stage s on s.id=ts.stages_id
where t.difficulty=4 and t.terrain=4;

/*Index toevoegen*/
alter table dbo.treasure_stages
add index ind_tsid
nonclustered(treasure_id)